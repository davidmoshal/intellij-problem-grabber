This file is a merged representation of a subset of the codebase, containing specifically included files and files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where content has been formatted for parsing in plain style.

================================================================
Directory Structure
================================================================
src/
  main/
    kotlin/
      com/
        github/
          davidmoshal/
            problemgrabber/
              actions/
                CaptureProblemsAction.kt
              models/
                ProblemData.kt
              services/
                ProblemGrabberService.kt
    resources/
      META-INF/
        plugin.xml
  test/
    kotlin/
      org/
        jetbrains/
          plugins/
            template/
              MyPluginTest.kt
    testData/
build.gradle.kts
gradle.properties
README.md
settings.gradle.kts

================================================================
Files
================================================================

================
File: src/main/kotlin/com/github/davidmoshal/problemgrabber/actions/CaptureProblemsAction.kt
================
package com.github.davidmoshal.problemgrabber.actions

import com.github.davidmoshal.problemgrabber.services.ProblemGrabberService
import com.intellij.openapi.actionSystem.AnAction
import com.intellij.openapi.actionSystem.AnActionEvent
import com.intellij.openapi.actionSystem.CommonDataKeys
import com.intellij.openapi.diagnostic.Logger
import com.intellij.openapi.project.Project
import com.intellij.openapi.ui.Messages
import com.intellij.openapi.ui.popup.JBPopupFactory
import com.intellij.openapi.ui.popup.PopupStep
import com.intellij.openapi.ui.popup.util.BaseListPopupStep

/**
 * Action to capture problems
 */
class CaptureProblemsAction : AnAction() {
    private val LOG = Logger.getInstance(CaptureProblemsAction::class.java)

    override fun actionPerformed(e: AnActionEvent) {
        LOG.info("Capture problems action triggered")

        val project = e.project ?: return
        val file = e.getData(CommonDataKeys.VIRTUAL_FILE)

        // Show options popup
        val options = if (file != null) {
            listOf(
                "Capture problems in this file",
                "Capture all project problems",
                "Cancel"
            )
        } else {
            listOf(
                "Capture all project problems",
                "Cancel"
            )
        }

        JBPopupFactory.getInstance().createListPopup(
            object : BaseListPopupStep<String>("Capture Problems", options) {
                override fun onChosen(selectedValue: String, finalChoice: Boolean): PopupStep<*>? {
                    if (finalChoice) {
                        when (selectedValue) {
                            "Capture problems in this file" -> {
                                captureFileProblems(project, file!!)
                            }
                            "Capture all project problems" -> {
                                captureAllProblems(project)
                            }
                        }
                    }
                    return FINAL_CHOICE
                }
            }
        ).showInBestPositionFor(e.dataContext)
    }

    override fun update(e: AnActionEvent) {
        // Only enable if a project is open
        e.presentation.isEnabled = e.project != null
    }

    /**
     * Capture problems for a specific file
     */
    private fun captureFileProblems(project: Project, file: com.intellij.openapi.vfs.VirtualFile) {
        val service = ProblemGrabberService.getInstance(project)
        val problems = service.getProblemsForFile(file)

        if (problems.isEmpty()) {
            Messages.showInfoMessage(
                project,
                "No problems found in file: ${file.name}",
                "No Problems Found"
            )
            return
        }

        service.copyToClipboard(problems)

        Messages.showInfoMessage(
            project,
            "${problems.size} problem(s) copied to clipboard in LLM-friendly format.",
            "Problems Captured"
        )
    }

    /**
     * Capture all problems in the project
     */
    private fun captureAllProblems(project: Project) {
        val service = ProblemGrabberService.getInstance(project)
        val problems = service.getProblems()

        if (problems.isEmpty()) {
            Messages.showInfoMessage(
                project,
                "No problems found in the project.",
                "No Problems Found"
            )
            return
        }

        service.copyToClipboard(problems)

        Messages.showInfoMessage(
            project,
            "${problems.size} problem(s) copied to clipboard in LLM-friendly format.",
            "Problems Captured"
        )
    }
}

================
File: src/main/kotlin/com/github/davidmoshal/problemgrabber/models/ProblemData.kt
================
package com.github.davidmoshal.problemgrabber.models

/**
 * Data class representing an IntelliJ problem
 */
data class ProblemData(
    val message: String,
    val description: String,
    val type: String,
    val fileName: String,
    val lineNumber: Int,
    val columnNumber: Int,
    val severity: String,
    val fix: String?,
    val code: String?,
    val surroundingCode: String?
) {
    fun toMarkdown(): String {
        val sb = StringBuilder()

        sb.appendLine("## Problem Details")
        sb.appendLine("- **Message**: $message")
        if (description.isNotBlank()) {
            sb.appendLine("- **Description**: $description")
        }
        sb.appendLine("- **Type**: $type")
        sb.appendLine("- **Severity**: $severity")
        sb.appendLine("- **File**: $fileName")
        sb.appendLine("- **Line**: $lineNumber")
        sb.appendLine("- **Column**: $columnNumber")

        if (!fix.isNullOrBlank()) {
            sb.appendLine("\n### Quick Fix")
            sb.appendLine(fix)
        }

        if (!code.isNullOrBlank()) {
            sb.appendLine("\n### Problematic Code")
            sb.appendLine("```")
            sb.appendLine(code)
            sb.appendLine("```")
        }

        if (!surroundingCode.isNullOrBlank()) {
            sb.appendLine("\n### Code Context")
            sb.appendLine("```")
            sb.appendLine(surroundingCode)
            sb.appendLine("```")
        }

        return sb.toString()
    }
}

================
File: src/main/kotlin/com/github/davidmoshal/problemgrabber/services/ProblemGrabberService.kt
================
package com.github.davidmoshal.problemgrabber.services

import com.github.davidmoshal.problemgrabber.models.ProblemData
import com.intellij.codeInsight.daemon.impl.DaemonCodeAnalyzerImpl
import com.intellij.codeInsight.daemon.impl.HighlightInfo
import com.intellij.lang.annotation.HighlightSeverity
import com.intellij.openapi.components.Service
import com.intellij.openapi.diagnostic.Logger
import com.intellij.openapi.editor.Document
import com.intellij.openapi.fileEditor.FileDocumentManager
import com.intellij.openapi.fileEditor.FileEditorManager
import com.intellij.openapi.project.Project
import com.intellij.openapi.util.TextRange
import com.intellij.openapi.vfs.VirtualFile
import com.intellij.psi.PsiFile
import com.intellij.psi.PsiManager
import java.awt.Toolkit
import java.awt.datatransfer.StringSelection
import java.io.File

@Service(Service.Level.PROJECT)
class ProblemGrabberService(private val project: Project) {
    private val LOG = Logger.getInstance(ProblemGrabberService::class.java)

    /**
     * Get problems for the current project
     */
    fun getProblems(): List<ProblemData> {
        LOG.info("Getting all problems for project: ${project.name}")

        val problems = mutableListOf<ProblemData>()

        // Get all open files
        val fileEditorManager = FileEditorManager.getInstance(project)
        val openFiles = fileEditorManager.openFiles

        for (file in openFiles) {
            problems.addAll(getProblemsForFile(file))
        }

        return problems
    }

    private fun isActualProblem(info: HighlightInfo): Boolean {
        // Only include errors, warnings, and weak warnings
        return when (info.severity) {
            HighlightSeverity.ERROR -> true
            HighlightSeverity.WARNING -> true
            HighlightSeverity.WEAK_WARNING -> true
            HighlightSeverity.INFORMATION -> true
            // Exclude SYMBOL_TYPE_SEVERITY and others
            else -> false
        }
    }

    /**
     * Get problems for a specific file
     */
    fun getProblemsForFile(file: VirtualFile): List<ProblemData> {
        LOG.info("Getting problems for file: ${file.path}")

        val problems = mutableListOf<ProblemData>()

        val psiManager = PsiManager.getInstance(project)
        val fileDocumentManager = FileDocumentManager.getInstance()

        val psiFile = psiManager.findFile(file) ?: return emptyList()
        val document = fileDocumentManager.getDocument(file) ?: return emptyList()

        // Get highlighting info for this file
        val highlights = DaemonCodeAnalyzerImpl.getHighlights(document, null, project)
        if (highlights == null || highlights.isEmpty()) return emptyList()

        LOG.info("Found ${highlights.size} highlights for file ${file.name}")

        for (info in highlights) {
            val problemData = convertToProblemData(info, file, document, psiFile)
            if (problemData != null) {
                problems.add(problemData)
            }
        }

        LOG.info("Filtered to ${problems.size} actual problems")

        return problems
    }

    /**
     * Convert HighlightInfo to ProblemData
     */
    /**
     * Convert HighlightInfo to ProblemData
     */
    private fun convertToProblemData(info: HighlightInfo, file: VirtualFile, document: Document, psiFile: PsiFile): ProblemData? {
        // Only include actual errors and warnings
        if (!isActualProblem(info)) {
            return null
        }

        // Rest of the method stays the same
        val startOffset = info.startOffset
        val lineNumber = document.getLineNumber(startOffset)
        val lineStartOffset = document.getLineStartOffset(lineNumber)
        val columnNumber = startOffset - lineStartOffset

        // Get code snippet
        val codeSnippet = extractCodeSnippet(document, lineNumber)
        val surroundingCode = extractSurroundingCode(document, lineNumber, 3)

        return ProblemData(
            message = info.description ?: "Unknown problem",
            description = info.toolTip ?: "",
            type = info.type.toString(),
            fileName = file.path,
            lineNumber = lineNumber + 1, // Convert to 1-based line number
            columnNumber = columnNumber + 1, // Convert to 1-based column number
            severity = info.severity.name,
            fix = getQuickFix(info, psiFile),
            code = codeSnippet,
            surroundingCode = surroundingCode
        )
    }

    /**
     * Get quick fix information if available
     */
    private fun getQuickFix(info: HighlightInfo, psiFile: PsiFile): String? {
        return info.quickFixActionRanges?.firstOrNull()?.first?.action?.text
    }

    /**
     * Extract code from a document at a specific line
     */
    private fun extractCodeSnippet(document: Document, line: Int): String {
        if (line < 0 || line >= document.lineCount) {
            return ""
        }

        val startOffset = document.getLineStartOffset(line)
        val endOffset = document.getLineEndOffset(line)
        return document.getText(TextRange(startOffset, endOffset)).trim()
    }

    /**
     * Extract surrounding code from a document
     */
    private fun extractSurroundingCode(document: Document, line: Int, contextLines: Int): String {
        if (line < 0 || line >= document.lineCount) {
            return ""
        }

        val startLine = maxOf(0, line - contextLines)
        val endLine = minOf(document.lineCount - 1, line + contextLines)

        val result = StringBuilder()
        for (i in startLine..endLine) {
            val linePrefix = if (i == line) ">>> " else "    "
            val lineNumber = "${i + 1}".padStart(4)
            val lineText = document.getText(TextRange(
                document.getLineStartOffset(i),
                document.getLineEndOffset(i)
            ))
            result.appendLine("$lineNumber: $linePrefix$lineText")
        }

        return result.toString()
    }

    /**
     * Copy problems to clipboard
     */
    fun copyToClipboard(problems: List<ProblemData>) {
        LOG.info("Copying ${problems.size} problems to clipboard")

        val sb = StringBuilder()
        sb.appendLine("# Project Problems: ${project.name}")
        sb.appendLine("Total problems: ${problems.size}")
        sb.appendLine()

        problems.forEachIndexed { index, problem ->
            sb.appendLine("## Problem ${index + 1}")
            sb.appendLine(problem.toMarkdown())
            sb.appendLine("---")
        }

        val selection = StringSelection(sb.toString())
        val clipboard = Toolkit.getDefaultToolkit().systemClipboard
        clipboard.setContents(selection, selection)
    }

    /**
     * Export problems to file
     */
    fun exportToFile(problems: List<ProblemData>, filePath: String) {
        LOG.info("Exporting ${problems.size} problems to file: $filePath")

        val sb = StringBuilder()
        sb.appendLine("# Project Problems: ${project.name}")
        sb.appendLine("Total problems: ${problems.size}")
        sb.appendLine()

        problems.forEachIndexed { index, problem ->
            sb.appendLine("## Problem ${index + 1}")
            sb.appendLine(problem.toMarkdown())
            sb.appendLine("---")
        }

        File(filePath).writeText(sb.toString())
    }

    companion object {
        fun getInstance(project: Project): ProblemGrabberService {
            return project.getService(ProblemGrabberService::class.java)
        }
    }
}

================
File: src/main/resources/META-INF/plugin.xml
================
<!-- Plugin Configuration File. Read more: https://plugins.jetbrains.com/docs/intellij/plugin-configuration-file.html -->
<idea-plugin>
    <id>com.github.davidmoshal.problemgrabber</id>
    <name>Problem Grabber</name>
    <vendor>davidmoshal</vendor>
    <description><![CDATA[
        Capture IntelliJ problems for sharing with LLMs.
        <br>
        Features:
        <ul>
            <li>Capture problems in a file</li>
            <li>Capture all project problems</li>
            <li>Format problems in LLM-friendly markdown format</li>
            <li>Copy to clipboard for easy sharing</li>
        </ul>
    ]]></description>
    <version>1.0.0</version>
    <change-notes><![CDATA[
        Initial release of Problem Grabber.
    ]]></change-notes>

    <!-- Specify compatibility with IntelliJ platform versions -->
    <idea-version since-build="233" until-build="244.*" />

    <depends>com.intellij.modules.platform</depends>
    <depends>com.intellij.modules.lang</depends>

    <!-- No service registration needed since we're using @Service annotation -->

    <actions>
        <!-- Add main action -->
        <action id="ProblemGrabber.CaptureProblems"
                class="com.github.davidmoshal.problemgrabber.actions.CaptureProblemsAction"
                text="Capture Problems for LLM"
                description="Copy problems to clipboard in LLM-friendly format">
            <add-to-group group-id="ProjectViewPopupMenu" anchor="last"/>
            <add-to-group group-id="EditorPopupMenu" anchor="last"/>
            <add-to-group group-id="ConsoleEditorPopupMenu" anchor="last"/>
            <add-to-group group-id="EditorTabPopupMenu" anchor="last"/>
            <add-to-group group-id="ToolsMenu" anchor="last"/>
            <keyboard-shortcut keymap="$default" first-keystroke="alt shift P" />
        </action>
    </actions>

</idea-plugin>

================
File: src/test/kotlin/org/jetbrains/plugins/template/MyPluginTest.kt
================
package org.jetbrains.plugins.template

import com.github.davidmoshal.problemgrabber.services.ProblemGrabberService
import com.intellij.ide.highlighter.XmlFileType
import com.intellij.openapi.components.service
import com.intellij.psi.xml.XmlFile
import com.intellij.testFramework.TestDataPath
import com.intellij.testFramework.fixtures.BasePlatformTestCase
import com.intellij.util.PsiErrorElementUtil

@TestDataPath("\$CONTENT_ROOT/src/test/testData")
class MyPluginTest : BasePlatformTestCase() {

    fun testXMLFile() {
        val psiFile = myFixture.configureByText(XmlFileType.INSTANCE, "<foo>bar</foo>")
        val xmlFile = assertInstanceOf(psiFile, XmlFile::class.java)

        assertFalse(PsiErrorElementUtil.hasErrors(project, xmlFile.virtualFile))

        assertNotNull(xmlFile.rootTag)

        xmlFile.rootTag?.let {
            assertEquals("foo", it.name)
            assertEquals("bar", it.value.text)
        }
    }

    fun testRename() {
        myFixture.testRename("foo.xml", "foo_after.xml", "a2")
    }

    fun testProjectService() {
        val projectService = project.service<ProblemGrabberService>()

        // assertNotSame(projectService.getRandomNumber(), projectService.getRandomNumber())
    }

    override fun getTestDataPath() = "src/test/testData/rename"
}

================
File: build.gradle.kts
================
import org.jetbrains.changelog.Changelog
import org.jetbrains.changelog.markdownToHTML
import org.jetbrains.intellij.platform.gradle.TestFrameworkType

plugins {
    id("java") // Java support
    alias(libs.plugins.kotlin) // Kotlin support
    alias(libs.plugins.intelliJPlatform) // IntelliJ Platform Gradle Plugin
    alias(libs.plugins.changelog) // Gradle Changelog Plugin
    alias(libs.plugins.qodana) // Gradle Qodana Plugin
    alias(libs.plugins.kover) // Gradle Kover Plugin
}

group = providers.gradleProperty("pluginGroup").get()
version = providers.gradleProperty("pluginVersion").get()

// Set the JVM language level used to build the project.
kotlin {
    jvmToolchain(17)
}

// Configure project's dependencies
repositories {
    mavenCentral()

    // IntelliJ Platform Gradle Plugin Repositories Extension - read more: https://plugins.jetbrains.com/docs/intellij/tools-intellij-platform-gradle-plugin-repositories-extension.html
    intellijPlatform {
        defaultRepositories()
    }
}

// Dependencies are managed with Gradle version catalog - read more: https://docs.gradle.org/current/userguide/platforms.html#sub:version-catalog
dependencies {
    testImplementation(libs.junit)

    // IntelliJ Platform Gradle Plugin Dependencies Extension - read more: https://plugins.jetbrains.com/docs/intellij/tools-intellij-platform-gradle-plugin-dependencies-extension.html
    intellijPlatform {
        create(providers.gradleProperty("platformType"), providers.gradleProperty("platformVersion"))

        // Plugin Dependencies. Uses `platformBundledPlugins` property from the gradle.properties file for bundled IntelliJ Platform plugins.
        bundledPlugins(providers.gradleProperty("platformBundledPlugins").map { it.split(',') })

        // Plugin Dependencies. Uses `platformPlugins` property from the gradle.properties file for plugin from JetBrains Marketplace.
        plugins(providers.gradleProperty("platformPlugins").map { it.split(',') })

        instrumentationTools()
        pluginVerifier()
        zipSigner()
        testFramework(TestFrameworkType.Platform)
    }
}

// Configure IntelliJ Platform Gradle Plugin - read more: https://plugins.jetbrains.com/docs/intellij/tools-intellij-platform-gradle-plugin-extension.html
intellijPlatform {
    pluginConfiguration {
        version = providers.gradleProperty("pluginVersion")

        // Extract the <!-- Plugin description --> section from README.md and provide for the plugin's manifest
        description = providers.fileContents(layout.projectDirectory.file("README.md")).asText.map {
            val start = "<!-- Plugin description -->"
            val end = "<!-- Plugin description end -->"

            with(it.lines()) {
                if (!containsAll(listOf(start, end))) {
                    throw GradleException("Plugin description section not found in README.md:\n$start ... $end")
                }
                subList(indexOf(start) + 1, indexOf(end)).joinToString("\n").let(::markdownToHTML)
            }
        }

        val changelog = project.changelog // local variable for configuration cache compatibility
        // Get the latest available change notes from the changelog file
        changeNotes = providers.gradleProperty("pluginVersion").map { pluginVersion ->
            with(changelog) {
                renderItem(
                    (getOrNull(pluginVersion) ?: getUnreleased())
                        .withHeader(false)
                        .withEmptySections(false),
                    Changelog.OutputType.HTML,
                )
            }
        }

        ideaVersion {
            sinceBuild = providers.gradleProperty("pluginSinceBuild")
            untilBuild = providers.gradleProperty("pluginUntilBuild")
        }
    }

    signing {
        certificateChain = providers.environmentVariable("CERTIFICATE_CHAIN")
        privateKey = providers.environmentVariable("PRIVATE_KEY")
        password = providers.environmentVariable("PRIVATE_KEY_PASSWORD")
    }

    publishing {
        token = providers.environmentVariable("PUBLISH_TOKEN")
        // The pluginVersion is based on the SemVer (https://semver.org) and supports pre-release labels, like 2.1.7-alpha.3
        // Specify pre-release label to publish the plugin in a custom Release Channel automatically. Read more:
        // https://plugins.jetbrains.com/docs/intellij/deployment.html#specifying-a-release-channel
        channels = providers.gradleProperty("pluginVersion").map { listOf(it.substringAfter('-', "").substringBefore('.').ifEmpty { "default" }) }
    }

    pluginVerification {
        ides {
            recommended()
        }
    }
}

// Configure Gradle Changelog Plugin - read more: https://github.com/JetBrains/gradle-changelog-plugin
changelog {
    groups.empty()
    repositoryUrl = providers.gradleProperty("pluginRepositoryUrl")
}

// Configure Gradle Kover Plugin - read more: https://github.com/Kotlin/kotlinx-kover#configuration
kover {
    reports {
        total {
            xml {
                onCheck = true
            }
        }
    }
}

tasks {
    wrapper {
        gradleVersion = providers.gradleProperty("gradleVersion").get()
    }

    publishPlugin {
        dependsOn(patchChangelog)
    }
}

================
File: gradle.properties
================
pluginGroup = com.github.davidmoshal.problemgrabber
pluginName = Problem Grabber
pluginRepositoryUrl = https://github.com/davidmoshal/problem-grabber
# SemVer format -> https://semver.org
pluginVersion = 1.0.0

# These can stay as they are
pluginSinceBuild = 233
pluginUntilBuild = 244.*

# Updated to match your current IDE (IU = universal, IC = Community)
platformType = IU
platformVersion = 2024.3.4.1

# We don't need any additional plugins
platformPlugins =
platformBundledPlugins =

gradleVersion = 8.10.2

kotlin.stdlib.default.dependency = false
org.gradle.configuration-cache = true
org.gradle.caching = true

================
File: README.md
================
# Problem Grabber

<!-- Plugin description -->
Problem Grabber captures problem details from IntelliJ IDEA in a format optimized for sharing with Large Language Models (LLMs). It allows you to easily copy problem details, including line numbers, file paths, error messages, and quick fix suggestions, to help get better assistance from LLMs.
<!-- Plugin description end -->

## Features

- Capture problems in a specific file
- Capture all problems in a project
- Format problems in LLM-friendly markdown format
- Copy formatted problems to clipboard for easy sharing with LLMs

### Features (from more comprehensive first iteration, which we simplified)
TODO: consider adding these if missing:
- Capture single problem details
- Capture all problems in a file
- Capture all problems in a project
- Filter problems by severity or type
- Export to clipboard or file
- Format problems in LLM-friendly format

## Usage

1. Right-click on a file in the Project view or Editor
2. Select "Capture Problems for LLM"
3. Choose whether to capture problems in the current file or the entire project
4. Problems will be copied to the clipboard in markdown format
5. Paste into your favorite LLM chat interface

## Building

This plugin is built using Gradle. To build:

```bash
./gradlew build

================
File: settings.gradle.kts
================
rootProject.name = "problem-grabber"

plugins {
    id("org.gradle.toolchains.foojay-resolver-convention") version "0.8.0"
}



================================================================
End of Codebase
================================================================
